apiVersion: argoproj.io/v1alpha1
kind: ArgoCD
metadata:
  name: {{ .Release.Name }}

spec:
  disableAdmin: true
  dex:
    openShiftOAuth: true

  rbac:
    policy: |
      g, system:cluster-admins, role:admin
    scopes: '[groups]'
  applicationInstanceLabelKey: argocd.argoproj.io/instance

  ha:
    enabled: false
  server:
    host: {{ .Values.ingress.hostname }}
    ingress:
      enabled: true
      ingressClassName: {{ .Values.ingress.class }}
      annotations:
        nginx.ingress.kubernetes.io/ssl-passthrough: "false"
        nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
        nginx.ingress.kubernetes.io/ssl-redirect: "true"
        nginx.ingress.kubernetes.io/auth-tls-verify-client: "on"
        nginx.ingress.kubernetes.io/auth-tls-secret: "{{ .Release.Namespace }}/{{ .Release.Name }}-tls"
        acme.cert-manager.io/http01-ingress-class: {{ .Values.ingress.class }}
        cert-manager.io/cluster-issuer: smallstep-acme-http
      tls:
      - hosts:
          - {{ .Values.ingress.hostname }}
        secretName: {{ .Release.Name }}-frontend-tls

  resourceExclusions: |
    - apiGroups:
        - kyverno.io
      kinds:
        - AdmissionReport
        - BackgroundScanReport
        - ClusterAdmissionReport
        - ClusterBackgroundScanReport
      clusters:
         - '*'
  resourceHealthChecks:
    - group: vault.advatys.com
      kind: AWSSecretBackendRole
      check: |
        hs = {}
        if obj.status ~= nil then
          if obj.status.conditions ~= nil then
            for i, condition in ipairs(obj.status.conditions) do
              if condition.type == "Successful" and condition.status == "False" then
                hs.status = "Degraded"
                hs.message = condition.message
                return hs
              end
              if condition.type == "Successful" and condition.status == "True" then
                hs.status = "Healthy"
                hs.message = condition.message
                return hs
              end
            end
          end
        end
        hs.status = "Progressing"
        hs.message = "Waiting for Vault configuration"
        return hs
    - group: vault.advatys.com
      kind: AzureSecretBackendRole
      check: |
        hs = {}
        if obj.status ~= nil then
          if obj.status.conditions ~= nil then
            for i, condition in ipairs(obj.status.conditions) do
              if condition.type == "Successful" and condition.status == "False" then
                hs.status = "Degraded"
                hs.message = condition.message
                return hs
              end
              if condition.type == "Successful" and condition.status == "True" then
                hs.status = "Healthy"
                hs.message = condition.message
                return hs
              end
            end
          end
        end
        hs.status = "Progressing"
        hs.message = "Waiting for Vault configuration"
        return hs
    - group: redhatcop.redhat.io
      kind: JWTOIDCAuthEngineRole
      check: |
        hs = {}
        if obj.status ~= nil then
          if obj.status.conditions ~= nil then
            for i, condition in ipairs(obj.status.conditions) do
              if condition.type == "ReconcileSuccessful" and condition.status == "False" then
                hs.status = "Degraded"
                hs.message = condition.message
                return hs
              end
              if condition.type == "ReconcileSuccessful" and condition.status == "True" then
                hs.status = "Healthy"
                hs.message = condition.message
                return hs
              end
            end
          end
        end
        hs.status = "Progressing"
        hs.message = "Waiting for Vault configuration"
        return hs
    - group: redhatcop.redhat.io
      kind: KubernetesAuthEngineRole
      check: |
        hs = {}
        if obj.status ~= nil then
          if obj.status.conditions ~= nil then
            for i, condition in ipairs(obj.status.conditions) do
              if condition.type == "ReconcileSuccessful" and condition.status == "False" then
                hs.status = "Degraded"
                hs.message = condition.message
                return hs
              end
              if condition.type == "ReconcileSuccessful" and condition.status == "True" then
                hs.status = "Healthy"
                hs.message = condition.message
                return hs
              end
            end
          end
        end
        hs.status = "Progressing"
        hs.message = "Waiting for Vault configuration"
        return hs
    - group: redhatcop.redhat.io
      kind: Policy
      check: |
        hs = {}
        if obj.status ~= nil then
          if obj.status.conditions ~= nil then
            for i, condition in ipairs(obj.status.conditions) do
              if condition.type == "ReconcileSuccessful" and condition.status == "False" then
                hs.status = "Degraded"
                hs.message = condition.message
                return hs
              end
              if condition.type == "ReconcileSuccessful" and condition.status == "True" then
                hs.status = "Healthy"
                hs.message = condition.message
                return hs
              end
            end
          end
        end
        hs.status = "Progressing"
        hs.message = "Waiting for Vault configuration"
        return hs
  repo:
    sidecarContainers:
    {{- if .Values.plugins.tanka }}
    - command:
      - /bin/sh
      - -c
      - wget -O /tmp/yq https://github.com/mikefarah/yq/releases/download/v4.34.1/yq_linux_amd64 && chmod +x /tmp/yq && /var/run/argocd/argocd-cmp-server
      env:
      - name: HOME
        value: /tmp
      image: grafana/tanka:latest
      name: tanka-cmp
      securityContext:
        runAsNonRoot: true
      volumeMounts:
      - mountPath: /var/run/argocd
        name: var-files
      - mountPath: /home/argocd/cmp-server/plugins
        name: plugins
      - mountPath: /home/argocd/cmp-server/config/plugin.yaml
        name: tanka-cmp
        subPath: plugin.yaml
      - mountPath: /tmp
        name: tmp
    {{- end }}
    {{- if  .Values.plugins.kapitan }}
    - command:
      - /bin/sh
      - -c
      - |
          ## Install yq
          python -c "

          import http.client

          # Create a connection to the host
          conn = http.client.HTTPSConnection('github.com')

          # Make a GET request to the specified path
          conn.request('GET', '/mikefarah/yq/releases/download/v4.35.2/yq_linux_amd64')

          # Get the response
          resp = conn.getresponse()

          # Write the response content to a file
          with open('/tmp/yq', 'wb') as f:
              f.write(resp.read())" 


          ## Install jq
          python -c "

          import http.client

          # Create a connection to the host
          conn = http.client.HTTPSConnection('github.com')

          # Make a GET request to the specified path
          conn.request('GET', '/jqlang/jq/releases/download/jq-1.7/jq-linux-amd64')

          # Get the response
          resp = conn.getresponse()

          # Write the response content to a file
          with open('/tmp/jq', 'wb') as f:
              f.write(resp.read())" 

          chmod +x /tmp/yq && chmod +x /tmp/jq && /var/run/argocd/argocd-cmp-server
      env:
      - name: HOME
        value: /tmp
      image: docker.io/kapicorp/kapitan:v0.32.0
      name: kapitan-cmp
      securityContext:
        runAsNonRoot: true
      volumeMounts:
      - mountPath: /var/run/argocd
        name: var-files
      - mountPath: /home/argocd/cmp-server/plugins
        name: plugins
      - mountPath: /home/argocd/cmp-server/config/plugin.yaml
        name: kapitan-cmp
        subPath: plugin.yaml
      - mountPath: /tmp
        name: tmp
    {{- end }}
    volumes:
    {{- if  .Values.plugins.kapitan }}
    - configMap:
        name: {{ .Release.Name}}-kapitan-cmp
      name: kapitan-cmp
    {{- end }}
    {{- if  .Values.plugins.tanka }}
    - configMap:
        name: {{ .Release.Name}}-tanka-cmp 
      name: tanka-cmp
    {{- end }}
